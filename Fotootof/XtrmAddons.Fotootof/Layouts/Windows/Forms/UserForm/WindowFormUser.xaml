<base:WindowBaseForm
	x:Name="UCWindowFormUser"
    x:Class="XtrmAddons.Fotootof.Layouts.Windows.Forms.UserForm.WindowFormUser"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:p="clr-namespace:XtrmAddons.Fotootof.Culture.Properties;assembly=XtrmAddons.Fotootof.Culture"
    xmlns:base="clr-namespace:XtrmAddons.Fotootof.Lib.Base.Classes.Windows;assembly=XtrmAddons.Fotootof.Lib.Base"
    xmlns:rrString="clr-namespace:XtrmAddons.Net.Windows.ValidationRules;assembly=XtrmAddons.Net.Windows"
    mc:Ignorable="d"
    Width="480"
    Height="480"
    ResizeMode="NoResize"
    WindowStartupLocation="CenterScreen"
    FocusManager.FocusedElement="{Binding ElementName=InputName}"
	Loaded="Window_Load"
	Closing="Window_Closing"
	Style="{DynamicResource WindowStyle}"
    Title="{x:Static p:Resources.WindowUserFormTitle}">
	
	<Grid x:Name="GridBlockRootName" Style="{StaticResource FrameworkElementRootStyle}">

		<Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="40"/>
        </Grid.RowDefinitions>

        <TabControl 
            x:Name="TabControlContent"
            Grid.Row="0">

            <!-- #region : Tabs Informations -->
			<TabItem Header="{x:Static p:Resources.Informations}">
				<Grid>
					<StackPanel Style="{StaticResource StackPanelFormStyle}">

                        <!-- #region : Field Name -->
						<StackPanel Style="{StaticResource StackPanelFieldStyle}">
							<TextBlock Text="{x:Static p:Resources.Name}" Style="{StaticResource TextBlockFieldLabelStyle}"/>

							<TextBox x:Name="InputName"
									 SourceUpdated="OnInputStringRequired_SourceUpdated"
									 Style="{StaticResource TextBoxFieldInputRequiredStyle}"
									 TargetUpdated="OnInput_TargetUpdated"
									 TextChanged="OnInputStringRequired_TextChanged"
									 Validation.Error="OnInput_ValidationError"
									 Validation.ErrorTemplate="{StaticResource ControlTemplateFormFieldValidation}"
									 Width="310">

								<TextBox.Text>
									<Binding Path="User.Name"
											 Mode="TwoWay"
											 UpdateSourceTrigger="LostFocus"
											 IsAsync="True"
											 ValidatesOnDataErrors="True"
											 ValidatesOnExceptions="True"
											 NotifyOnValidationError="True"
											 NotifyOnSourceUpdated="True"
											 NotifyOnTargetUpdated="True">

										<Binding.ValidationRules>
											<rrString:StringRequired />
										</Binding.ValidationRules>
									</Binding>
								</TextBox.Text>
							</TextBox>
							
						</StackPanel>
                        <!-- #endregion -->


						
                        <!-- #region : Field Password -->
						<StackPanel Style="{StaticResource StackPanelFieldStyle}">

							<TextBlock Text="{x:Static p:Resources.Password}" Style="{StaticResource TextBlockFieldLabelStyle}"/>

							<PasswordBox x:Name="InputPassword"
										 Style="{StaticResource PasswordBoxFieldInputRequired}"
										 Validation.ErrorTemplate="{StaticResource ControlTemplateFormFieldValidation}"
										 PasswordChanged="OnInputPassword_PasswordChanged"
										 Validation.Error="OnInput_ValidationError"
										 MaxLength="64"
										 Width="310">

								<!--<PasswordBox.Password>
									<Binding Path="User.Password"
											 Mode="TwoWay"
											 UpdateSourceTrigger="LostFocus"
											 IsAsync="True"
											 ValidatesOnDataErrors="True"
											 ValidatesOnExceptions="True">

										<Binding.ValidationRules>
											<rrString:StringRequiredPassword />
										</Binding.ValidationRules>
										<Binding.NotifyOnValidationError>
											True
										</Binding.NotifyOnValidationError>
										<Binding.NotifyOnSourceUpdated>
											True
										</Binding.NotifyOnSourceUpdated>
										<Binding.NotifyOnTargetUpdated>
											True
										</Binding.NotifyOnTargetUpdated>
									</Binding>
								</PasswordBox.Password>-->
								
								
							</PasswordBox>

						</StackPanel>
                        <!-- #endregion : Field Password -->
                    

                        <!-- #region : Field Email -->
						<StackPanel Orientation="Horizontal" Style="{StaticResource StackPanelFieldStyle}">
							<TextBlock Text="{x:Static p:Resources.Email}" Style="{StaticResource TextBlockFieldLabelStyle}"/>

							<TextBox x:Name="InputEmail"
									 Style="{StaticResource TextBoxFieldInputRequiredStyle}"
									 Validation.ErrorTemplate="{StaticResource ControlTemplateFormFieldValidation}"
									 Validation.Error="OnInput_ValidationError"
									 SourceUpdated="OnInputEmail_SourceUpdated"
									 TargetUpdated="OnInput_TargetUpdated"
									 TextChanged="OnInputEmail_TextChanged"
									 Width="310">

								<TextBox.Text>
									<Binding Path="User.Email"
											 Mode="TwoWay"
											 UpdateSourceTrigger="LostFocus"
											 IsAsync="True"
											 ValidatesOnDataErrors="True"
											 ValidatesOnExceptions="True"
											 NotifyOnValidationError="True"
											 NotifyOnSourceUpdated="True"
											 NotifyOnTargetUpdated="True">

										<Binding.ValidationRules>
											<rrString:StringRequiredEmail />
										</Binding.ValidationRules>
									</Binding>
								</TextBox.Text>
							</TextBox>

						</StackPanel>
                        <!-- #endregion : Field Email -->

                    </StackPanel>

                </Grid>

            </TabItem>
            <!-- #endregion : Tabs Informations -->



			<TabItem Header="{x:Static p:Resources.UsersGroups}">
				<StackPanel VerticalAlignment="Top" Style="{StaticResource StackPanelFieldStyle}">

					<DataGrid x:Name="CollectionAclGroups"
							  AutoGenerateColumns="False"
							  EnableRowVirtualization="false"
							  EnableColumnVirtualization="false"
							  ColumnWidth="*"
							  CanUserDeleteRows="False"
							  CanUserAddRows="False"
							  SelectionMode="Extended"
							  ItemsSource="{Binding AclGroups, UpdateSourceTrigger=PropertyChanged}"
							  DataContext="{Binding DataContext, ElementName=UCWindowFormUser, IsAsync=True}"
							  RowHeight="22"
							  HorizontalAlignment="Stretch"
							  VerticalAlignment="Stretch"
							  ScrollViewer.HorizontalScrollBarVisibility="Hidden"
							  Width="440"
							  Height="340"
							  SelectionUnit="FullRow"
							  Cursor="Hand"
							  CanUserReorderColumns="False"
							  CanUserResizeColumns="False"
							  CanUserSortColumns="True"
							  CanUserResizeRows="False">

						<DataGrid.Columns>
							<!-- #region : Column AclGroupId -->
							<DataGridTemplateColumn 
                                IsReadOnly="True"
                                Width="30"
                                CanUserSort="True"
                                Header="{x:Static p:Resources.Id}"
                                SortMemberPath="AclGroupId">

								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>

										<TextBlock
                                            Margin="5,0"
                                            Text="{Binding AclGroupId}"
                                            ToolTip="{Binding AclGroupId}"/>

									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<!-- #endregion : Column AclGroupId -->

							<!-- #region : Column Is Default -->
							<DataGridTemplateColumn CanUserResize="False"
													IsReadOnly="True"
													Width="20"
													CanUserSort="True"
													Header=""
													SortMemberPath="IsDefault">

								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>
										<CheckBox IsChecked="{Binding IsDefault, Mode=TwoWay}" IsEnabled="False"/>
									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<!-- #endregion : Column Is Default -->

							<!-- #region : Column Name -->
							<DataGridTemplateColumn 
                                IsReadOnly="True"
                                MinWidth="160"
                                CanUserSort="True"
                                Header="{x:Static p:Resources.Name}"
                                SortMemberPath="Name">

								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>

										<TextBlock Margin="5,0" Text="{Binding Name, Mode=TwoWay}"/>

									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<!-- #endregion : Column Name -->

							<!-- #region : Column CheckBox -->
							<DataGridTemplateColumn 
                                IsReadOnly="True"
                                Width="20"
                                CanUserSort="True">

								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>

										<CheckBox 
                                        Tag="{Binding}"
                                        IsChecked="{Binding PrimaryKey,
                                        Converter={StaticResource IsAclGroupInUser}}"
                                        Checked="CheckBoxAclGroup_Checked"
                                        Unchecked="CheckBoxAclGroup_UnChecked"/>

									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<!-- #endregion : Column CheckBox -->

						</DataGrid.Columns>
					</DataGrid>

				</StackPanel>
			</TabItem>

        </TabControl>


		<Border Grid.Row="1"
				Grid.RowSpan="2">

			<Grid>
				<StackPanel Style="{StaticResource StackPanel_FormValidator}">
					<Button x:Name="Button_Save"
							Click="DialogSave_Click"
							Content="{x:Static p:Resources.Save}"
							IsEnabled="{Binding IsSaveEnabled, UpdateSourceTrigger=Explicit, Mode=TwoWay, IsAsync=True}"
							Style="{StaticResource ButtonSaveStyle}"/>

					<Button x:Name="Button_Cancel"
							Content="{x:Static p:Resources.Cancel}"
							Style="{StaticResource ButtonCancelStyle}"/>

				</StackPanel>
			</Grid>
		</Border>

	</Grid>
</base:WindowBaseForm>
