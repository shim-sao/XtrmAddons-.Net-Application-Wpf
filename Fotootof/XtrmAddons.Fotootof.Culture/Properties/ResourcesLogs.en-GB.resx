<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddingApplicationToSystemTrayDone" xml:space="preserve">
    <value>Adding application to system tray. Done !</value>
    <comment>Fotootof.Local</comment>
  </data>
  <data name="AppClosed" xml:space="preserve">
    <value>Application closed.</value>
    <comment>ApplicationClosed</comment>
  </data>
  <data name="AppIntLanguage" xml:space="preserve">
    <value>Initializing application language. Please wait...</value>
    <comment>IntializingApplicationLanguage</comment>
  </data>
  <data name="ApplicationSettingsSaved" xml:space="preserve">
    <value>Application settings saved.</value>
  </data>
  <data name="AppSaveWaiting" xml:space="preserve">
    <value>Saving the application options &amp; parameters before exit. Please wait...</value>
    <comment>WaitingApplicationSave</comment>
  </data>
  <data name="AppStartWaiting" xml:space="preserve">
    <value>Starting the application. Initialiazing options &amp; parameters. Please wait...</value>
    <comment>WaitingApplicationStart</comment>
  </data>
  <data name="CopyingProgramFiles" xml:space="preserve">
    <value>Copying program files to My Documents user folder. Please wait...</value>
  </data>
  <data name="DatabaseConnectionReady" xml:space="preserve">
    <value>Database connection ready.</value>
  </data>
  <data name="DatabaseFileFound" xml:space="preserve">
    <value>Database file found.</value>
  </data>
  <data name="DatabaseNotFileFound" xml:space="preserve">
    <value>Database not file found.</value>
  </data>
  <data name="DeletingOptionsWaiting" xml:space="preserve">
    <value>Deleting the application options and parameters. Please wait...</value>
    <comment>WaitingDeletingOptions</comment>
  </data>
  <data name="DeletingUserOptionsWaiting" xml:space="preserve">
    <value>Deleting the user's options and parameters. Please wait...</value>
    <comment>WaitingDeletingUserOptions</comment>
  </data>
  <data name="InitializingApplicationWindowComponentDone" xml:space="preserve">
    <value>Initialisation du composant de la fenêtre d'application. Terminé !</value>
    <comment>Fotootof.Local</comment>
  </data>
  <data name="InitializingDatabaseConnection" xml:space="preserve">
    <value>Initializing database connection. Please wait...</value>
    <comment>Fotootof.Local</comment>
  </data>
  <data name="InitializingPageDone" xml:space="preserve">
    <value>Initializing Page {0} content. Done !</value>
    <comment>Fotootof.Libraries.Logs</comment>
  </data>
  <data name="InitializingPageWaiting" xml:space="preserve">
    <value>Initializing Page {0} content. Please wait...</value>
    <comment>Fotootof.Libraries.Logs</comment>
  </data>
  <data name="ItemDeleted" xml:space="preserve">
    <value>{0} deleted !</value>
    <comment>ItemDeleted</comment>
  </data>
  <data name="PleaseWait" xml:space="preserve">
    <value>Please wait...</value>
  </data>
  <data name="SendingAlbumsCommandDone" xml:space="preserve">
    <value>Sending ListAlbums command to server done !</value>
  </data>
  <data name="SendingAuthenticationCommandDone" xml:space="preserve">
    <value>Sending Authentication command to server done !</value>
  </data>
  <data name="SendingAuthenticationCommandException" xml:space="preserve">
    <value>Sending Authentication command : failed exception !</value>
  </data>
  <data name="SendingAuthenticationCommandResponseFailed" xml:space="preserve">
    <value>Sending Authentication command : failed from server !</value>
  </data>
  <data name="SendingAuthenticationCommandResponseOk" xml:space="preserve">
    <value>Sending Authentication command : success !</value>
  </data>
  <data name="SendingAuthenticationCommandUnauthorized" xml:space="preserve">
    <value>Sending Authentication command : user unauthorized !</value>
  </data>
  <data name="SendingClientCommand" xml:space="preserve">
    <value>Sending {0} command to server {1}:{2} =&gt; Please wait...</value>
  </data>
  <data name="SendingClientCommandDone" xml:space="preserve">
    <value>Sending {0} command to server {1}:{2} =&gt; Done !</value>
  </data>
  <data name="SendingListSectionsCommandDone" xml:space="preserve">
    <value>Sending ListSections command to server done !</value>
  </data>
  <data name="SendingListSectionsCommandException" xml:space="preserve">
    <value>Sending ListSections command : failed exception !</value>
  </data>
  <data name="SendingListSectionsCommandResponseFailed" xml:space="preserve">
    <value>Sending ListSections command : failed from server !</value>
  </data>
  <data name="SendingListSectionsCommandResponseOk" xml:space="preserve">
    <value>Sending ListSections command : success !</value>
  </data>
  <data name="SendingListSectionsCommandUnauthorized" xml:space="preserve">
    <value>Sending ListSections command : user unauthorized !</value>
  </data>
  <data name="SendingPingCommandDone" xml:space="preserve">
    <value>Sending Ping command to server done !</value>
  </data>
  <data name="SendingPingCommandException" xml:space="preserve">
    <value>Sending Ping command : failed exception !</value>
  </data>
  <data name="SendingPingCommandResponseFailed" xml:space="preserve">
    <value>Sending Ping command : failed from server !</value>
  </data>
  <data name="SendingPingCommandResponseOk" xml:space="preserve">
    <value>Sending Ping command : success !</value>
  </data>
  <data name="ServerStarted" xml:space="preserve">
    <value>Server started.</value>
  </data>
  <data name="ServerStopped" xml:space="preserve">
    <value>Server stopped.</value>
  </data>
  <data name="WindowClosing" xml:space="preserve">
    <value>Closing window : {0}</value>
  </data>
</root>